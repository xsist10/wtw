#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
    echo 'Warning: Should be invoked via the CLI version of PHP, not the ' . PHP_SAPI . ' SAPI' . PHP_EOL;
}

// Load manually so we don't conflict with any other composer autoloader that might be needed
require_once('vendor/aura/cli/src/CliFactory.php');
require_once('vendor/aura/cli/src/Context/AbstractValues.php');
require_once('vendor/aura/cli/src/Context/Env.php');
require_once('vendor/aura/cli/src/Context/Server.php');
require_once('vendor/aura/cli/src/Context/Argv.php');
require_once('vendor/aura/cli/src/Context/Getopt.php');
require_once('vendor/aura/cli/src/Context.php');
require_once('vendor/aura/cli/src/Stdio.php');
require_once('vendor/aura/cli/src/Stdio/Handle.php');
require_once('vendor/aura/cli/src/Stdio/Formatter.php');
require_once('vendor/aura/cli/src/Status.php');
require_once('src/Search/SearchAdapter.php');
require_once('src/Search/StackOverflow.php');
require_once('src/Search/DuckDuckGo.php');
require_once('src/Search/Google.php');
require_once('src/ErrorManager.php');

use Aura\Cli\CliFactory;
use Aura\Cli\Status;
use Xsist10\WTW\ErrorManager;

function usage($stdio)
{
    $stdio->outln("");
    $stdio->outln("Usage: wtw script");
    $stdio->outln("");
    $stdio->outln("Flags:");
    $stdio->outln("-h|--help       - Display this message");
    $stdio->outln("-w|--warning    - Enable warning detection");
    $stdio->outln("-s|--strict     - Enable strict detection");
    $stdio->outln("-d|--deprecated - Enable deprecated detection");
    $stdio->outln("--search=engine - Which search engine to use (Google|StackOverflow|DuckDuckGo)");
    $stdio->outln("");
}

$cli_factory = new CliFactory;
$context = $cli_factory->newContext($GLOBALS);
$stdio = $cli_factory->newStdio();

$options = array(
    'warning,w',
    'strict,s',
    'deprecated,d',
    'help,h',
    'search:'
);
$options = $context->getopt($options);

// Deal with input errors
if ($options->hasErrors()) {
    $errors = $options->getErrors();
    foreach ($errors as $error) {
        // print error messages to stderr using a Stdio object
        $stdio->errln($error->getMessage());
    }
};

if ($options->get('--help')) {
    usage($stdio);
    exit(Status::USAGE);
}

$file = realpath($options->get(1));
if ($file == NULL || !is_readable($file)) {
    $stdio->errln("<<red>>Please provide a script to execute.<<reset>>");
    usage($stdio);
    exit(Status::USAGE);
}

$search = $options->get('--search', 'Google');
$searchClass = 'Xsist10\\WTW\\Search\\' . $search;
if (!class_exists($searchClass)) {
    $stdio->errln("<<red>>Invalid search engine selected: $search.<<reset>>");
    usage($stdio);
    exit(Status::USAGE);
}

$errorManager = new ErrorManager(new $searchClass());
$errorManager->addLevel(E_ERROR)
    ->addLevel(E_PARSE)
    ->addLevel(E_CORE_ERROR)
    ->addLevel(E_COMPILE_ERROR)
    ->addLevel(E_USER_ERROR);

if ($options->get('--warning', false)) {
    $errorManager->addLevel(E_WARNING)
        ->addLevel(E_CORE_WARNING)
        ->addLevel(E_COMPILE_WARNING)
        ->addLevel(E_USER_WARNING);
}

if ($options->get('--strict', false)) {
    $errorManager->addLevel(E_WARNING)
    ->addLevel(E_NOTICE)
    ->addLevel(E_CORE_WARNING)
    ->addLevel(E_COMPILE_WARNING)
    ->addLevel(E_USER_WARNING)
    ->addLevel(E_USER_NOTICE)
    ->addLevel(E_STRICT)
    ->addLevel(E_RECOVERABLE_ERROR);
}

if ($options->get('--deprecated', false)) {
    $errorManager->addLevel(E_DEPRECATED)
        ->addLevel(E_USER_DEPRECATED);
}

$errorManager->register();
$errorManager->handleExceptions();

chdir(dirname($file));
require_once $file;