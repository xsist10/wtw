#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
    echo 'Warning: Should be invoked via the CLI version of PHP, not the ' . PHP_SAPI . ' SAPI' . PHP_EOL;
}

require_once('vendor/autoload.php');

use Aura\Cli\CliFactory;
use Aura\Cli\Status;
use Xsist10\WTW\DumpManager;

function usage($stdio)
{
    $stdio->outln("");
    $stdio->outln("Usage: wtw script");
    $stdio->outln("");
    $stdio->outln("Flags:");
    $stdio->outln("-h|--help       - Display this message");
    $stdio->outln("--search=engine - Which search engine to use (Google|StackOverflow|DuckDuckGo)");
    $stdio->outln("");
}

$cli_factory = new CliFactory;
$context = $cli_factory->newContext($GLOBALS);
$stdio = $cli_factory->newStdio();

$options = array(
    'help,h',
    'search:'
);
$options = $context->getopt($options);

// Deal with input errors
if ($options->hasErrors()) {
    $errors = $options->getErrors();
    foreach ($errors as $error) {
        // print error messages to stderr using a Stdio object
        $stdio->errln($error->getMessage());
    }
};

if ($options->get('--help')) {
    usage($stdio);
    exit(Status::USAGE);
}

$file = $options->get(1);
if ($file == NULL || !is_readable($file)) {
    $stdio->errln("<<red>>Please provide a script to execute.<<reset>>");
    usage($stdio);
    exit(Status::USAGE);
}

$search = $options->get('--search', 'Google');
$searchClass = 'Xsist10\\WTW\\Search\\' . $search;
if (!class_exists($searchClass)) {
    $stdio->errln("<<red>>Invalid search engine selected: $search.<<reset>>");
    usage($stdio);
    exit(Status::USAGE);
}

$dumpManager = new DumpManager(new $searchClass());

$pipes = array();
$proc = proc_open(
    "php -f " . escapeshellcmd($file),
    array(
        0 => array('pipe', 'r'),
        1 => array('pipe', 'w'),
        2 => array('pipe', 'w')
    ),
    $pipes,
    dirname($file)
);
stream_set_blocking($pipes[2], 0);

$stdout = stream_get_contents($pipes[1]);
fclose($pipes[1]);
$stderr = stream_get_contents($pipes[2]);
fclose($pipes[2]);

echo $stdout ."\n";
echo $stderr ."\n";

if ($stderr) {
    $dumpManager->process($stderr);
}